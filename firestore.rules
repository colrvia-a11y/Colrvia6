rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function signedIn() { return request.auth != null; }
    function uid() { return request.auth.uid; }
    function isUserOwner(doc) { return signedIn() && doc.userId == uid(); }
    function isProjectOwner(doc) { return signedIn() && doc.ownerId == uid(); }

    // 🔐 Interview sessions (top-level collection)
    match /interviewSessions/{docId} {
      // Read/query: only owner
      allow read: if isUserOwner(resource.data);

      // Create: must set own userId; startedAt must be timestamp
      allow create: if signedIn()
                    && request.resource.data.userId == uid()
                    && request.resource.data.startedAt is timestamp;

      // Update/Delete: only owner
      allow update, delete: if isUserOwner(resource.data);
    }

    // 🎨 Palettes (owned by userId)
    match /palettes/{paletteId} {
      allow read, update, delete: if isUserOwner(resource.data);
      allow create: if signedIn() && request.resource.data.userId == uid();
    }

    // 🗂 Projects (owned by ownerId)
    match /projects/{projectId} {
      allow read, update, delete: if isProjectOwner(resource.data);
      allow create: if signedIn() && request.resource.data.ownerId == uid();
    }

    // 🎨 Reference data (public read-only)
    match /paints/{paintId} {
      allow read: if true;
      allow write: if false;
    }
    match /brands/{brandId} {
      allow read: if true;
      allow write: if false;
    }

    // 👤 User subtree (be sure you want this breadth)
    match /users/{userId} {
      allow read, write: if signedIn() && userId == uid();
      match /{documents=**} {
        allow read, write: if signedIn() && userId == uid();
      }
    }

    // 🚫 Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

