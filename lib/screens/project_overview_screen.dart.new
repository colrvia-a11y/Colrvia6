import 'package:flutter/material.dart';
import '../models/project.dart';
import 'roller_screen.dart';
import 'color_plan_screen.dart';
import 'visualizer_screen.dart';
import '../services/analytics_service.dart';
import '../theme.dart';

/// Basic overview of a project with quick links to core tools.
class ProjectOverviewScreen extends StatelessWidget {
  final ProjectDoc project;
  const ProjectOverviewScreen({super.key, required this.project});

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 4,
      child: Scaffold(
        appBar: AppBar(
          title: Text(project.title),
          bottom: const TabBar(
            tabs: [
              Tab(text: 'color stories'),
              Tab(text: 'palettes'),
              Tab(text: 'colors'),
              Tab(text: 'images'),
            ],
          ),
        ),
        body: TabBarView(
          children: [
            // Color Stories Tab
            project.colorStoryId == null
                ? const Center(child: Text('No color story for this project.'))
                : FutureBuilder(
                    future: FirebaseService.getColorStory(project.colorStoryId!),
                    builder: (context, snapshot) {
                      if (snapshot.connectionState == ConnectionState.waiting) {
                        return const Center(child: CircularProgressIndicator());
                      }
                      if (!snapshot.hasData || snapshot.data == null) {
                        return const Center(child: Text('No color story found.'));
                      }
                      final story = snapshot.data;
                      return ListView(
                        padding: const EdgeInsets.all(16),
                        children: [
                          Text(story.title, style: Theme.of(context).textTheme.headline6),
                          if (story.heroImageUrl != null)
                            Padding(
                              padding: const EdgeInsets.symmetric(vertical: 12),
                              child: Image.network(story.heroImageUrl!),
                            ),
                          Text(story.narration),
                        ],
                      );
                    },
                  ),

            // Palettes Tab
            FutureBuilder(
              future: FirebaseService.getUserPalettes(project.ownerId),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }
                if (!snapshot.hasData || (snapshot.data as List).isEmpty) {
                  return const Center(child: Text('No palettes found.'));
                }
                final palettes = snapshot.data as List;
                return ListView.builder(
                  padding: const EdgeInsets.all(16),
                  itemCount: palettes.length,
                  itemBuilder: (context, i) {
                    final p = palettes[i];
                    return ListTile(
                      title: Text(p.name ?? 'Untitled Palette'),
                      subtitle: Row(
                        children: p.colors.map<Widget>((c) => Container(
                          width: 24, height: 24, margin: const EdgeInsets.only(right: 4),
                          decoration: BoxDecoration(
                            color: c,
                            borderRadius: BorderRadius.circular(4),
                            border: Border.all(color: Colors.black12),
                          ),
                        )).toList(),
                      ),
                    );
                  },
                );
              },
            ),

            // Colors Tab
            FutureBuilder(
              future: FirebaseService.getColorStory(project.colorStoryId ?? ''),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }
                if (!snapshot.hasData || snapshot.data == null) {
                  return const Center(child: Text('No colors found.'));
                }
                final story = snapshot.data;
                if (story.palette.isEmpty) {
                  return const Center(child: Text('No colors in this story.'));
                }
                return ListView(
                  padding: const EdgeInsets.all(16),
                  children: story.palette.map<Widget>((color) => ListTile(
                    leading: Container(
                      width: 32, height: 32,
                      decoration: BoxDecoration(
                        color: Color(int.parse(color.hex.replaceFirst('#', '0xff'))),
                        borderRadius: BorderRadius.circular(6),
                        border: Border.all(color: Colors.black12),
                      ),
                    ),
                    title: Text(color.name ?? color.hex),
                    subtitle: Text(color.role),
                  )).toList(),
                );
              },
            ),

            // Images Tab
            FutureBuilder(
              future: PhotoLibraryService.getUserPhotos(),
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                  return const Center(child: CircularProgressIndicator());
                }
                if (!snapshot.hasData || (snapshot.data as List).isEmpty) {
                  return const Center(child: Text('No images found.'));
                }
                final images = snapshot.data as List;
                return GridView.builder(
                  padding: const EdgeInsets.all(16),
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 3,
                    crossAxisSpacing: 8,
                    mainAxisSpacing: 8,
                  ),
                  itemCount: images.length,
                  itemBuilder: (context, i) {
                    final img = images[i];
                    return Image.memory(img.imageData, fit: BoxFit.cover);
                  },
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}
